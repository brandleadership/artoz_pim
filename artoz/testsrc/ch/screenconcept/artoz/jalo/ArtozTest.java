/*
 * Generated by ExtGen v3.0 
 */
package ch.screenconcept.artoz.jalo;

import de.hybris.platform.jalo.*;
import de.hybris.platform.jalo.product.Product;
import de.hybris.platform.jalo.product.ProductManager;
import de.hybris.platform.testframework.JaloTest;

import java.lang.reflect.Method;
import java.util.*;

import org.apache.log4j.Logger;

import ch.screenconcept.artoz.jalo.ArtozManager.ItemMethodInterceptor;

/**
 * JUnit Tests for the Artoz extension
 */

public class ArtozTest extends JaloTest
{
	/* edit the local|project.properties to change logging behaviour (properties log4j.*) */
	@SuppressWarnings("unused")
	private static final Logger log = Logger.getLogger( ArtozTest.class.getName() );
	

	public ArtozTest(String name)
	{
		super(name);
	}

	@Override
	protected void setUp() throws Exception
	{
		super.setUp();
	}

	@Override
	protected void tearDown() throws Exception
	{
		super.tearDown();
	}

	/**
	 * this is a sample test method
	 */
	public void testArtoz()
	{
		assertTrue( true );
	}
	
	public void testCGLIBSample() throws SecurityException, NoSuchMethodException
	{
		try
		{
			final Method SETCODE = Product.class.getMethod( "setCode", new Class[]{SessionContext.class, String.class} );
			final Method SETNAME = Product.class.getMethod( "setName", new Class[]{SessionContext.class, String.class} );
			final Method SETALLNAMES = Product.class.getMethod( "setAllNames", new Class[]{SessionContext.class, Map.class} ); 

			final List<Method> calledMethods = new ArrayList<Method>();
			final List<Object[]> calledArguments = new ArrayList<Object[]>();
			final List<Product> calledProducts = new ArrayList<Product>();
			final List<Product> completedProductCalls = new ArrayList<Product>();
			
			JaloImplementationManager.replaceCoreJaloClass(
				Product.class,
				new ItemMethodInterceptor( Product.class, SETCODE, SETNAME, SETALLNAMES )
				{
					@Override
					protected Object[] before( Item p, Method m, Object[] args )
					{
						calledProducts.add((Product) p);
						calledMethods.add(m);
						calledArguments.add(args);
						return args;
					}
					@Override
					protected Object after( Item i, Method m, Object[] originalArgs, Object[] args, Object returned )
					{
						completedProductCalls.add((Product) i);
						return returned;
					}
				}
			);
			
			final SessionContext ctx = jaloSession.getSessionContext();
			
			Product p1, p2;
			registerForRemoval( p1 = ProductManager.getInstance().createProduct( "proxyProduct1" ) );
			registerForRemoval( p2 = ProductManager.getInstance().createProduct( "proxyProduct2" ) );
			
			assertEquals( Collections.EMPTY_LIST, calledArguments );
			assertEquals( Collections.EMPTY_LIST, calledProducts );
			assertEquals( Collections.EMPTY_LIST, calledMethods );
			
			p1.setName( "p1" );
			p2.setCode( "p2" );
			p2.setAllNames( null, Collections.EMPTY_MAP );
			
			assertEquals( Arrays.asList( p1,p2,p2 ), calledProducts);
			assertEquals( Arrays.asList( SETNAME, SETCODE, SETALLNAMES ), calledMethods);
			checkArgs( 
				Arrays.asList( new Object[]{ctx, "p1"}, new Object[]{ctx, "p2"}, new Object[]{null, Collections.EMPTY_MAP} ), 
				calledArguments
			);
			
			assertEquals( p1.getClass(), p2.getClass() );
		}
		finally
		{
			JaloImplementationManager.clearJaloObjectMapping( Product.class );
		}
	}
	
	private void checkArgs( List<Object[]> expected , List<Object[]> actual )
	{
		assertEquals( expected.size(), actual.size() );
		for( int i = 0, s = expected.size(); i < s ; i++ )
		{
			Object[] e = expected.get(i);
			Object[] a = actual.get(i);
			if( e != a )
			{
				assertNotNull( e );
				assertNotNull( a );
				assertEquals( e.length, a.length );
				for( int j = 0, sj = e.length ; j < sj; j++ )
				{
					assertEquals( e[j], a[j] );
				}
			}
		}
	}

}


